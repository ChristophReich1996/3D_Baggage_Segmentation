{"model": "OccupancyNetwork(\n  (encoding): Sequential(\n    (0): VolumeEncoderBlock(\n      (activation_1): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (activation_2): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (normalization_1): Sequential(\n        (0): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n      )\n      (normalization_2): Sequential(\n        (0): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n      )\n      (convolution_1): Conv3d(1, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n      (convolution_2): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n      (residual_mapping): Conv3d(1, 32, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n      (downsampling): Sequential(\n        (0): AvgPool3d(kernel_size=2, stride=2, padding=0)\n      )\n    )\n    (1): VolumeEncoderBlock(\n      (activation_1): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (activation_2): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (normalization_1): Sequential(\n        (0): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n      )\n      (normalization_2): Sequential(\n        (0): InstanceNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n      )\n      (convolution_1): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n      (convolution_2): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n      (residual_mapping): Identity()\n      (downsampling): Sequential(\n        (0): AvgPool3d(kernel_size=2, stride=2, padding=0)\n      )\n    )\n    (2): VolumeEncoderBlock(\n      (activation_1): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (activation_2): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (normalization_1): Sequential(\n        (0): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n      )\n      (normalization_2): Sequential(\n        (0): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n      )\n      (convolution_1): Conv3d(32, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n      (convolution_2): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n      (residual_mapping): Conv3d(32, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n      (downsampling): Sequential(\n        (0): AvgPool3d(kernel_size=2, stride=2, padding=0)\n      )\n    )\n    (3): VolumeEncoderBlock(\n      (activation_1): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (activation_2): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (normalization_1): Sequential(\n        (0): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n      )\n      (normalization_2): Sequential(\n        (0): InstanceNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n      )\n      (convolution_1): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n      (convolution_2): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n      (residual_mapping): Identity()\n      (downsampling): Sequential(\n        (0): AvgPool3d(kernel_size=2, stride=2, padding=0)\n      )\n    )\n    (4): VolumeEncoderBlock(\n      (activation_1): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (activation_2): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (normalization_1): Sequential(\n        (0): InstanceNorm3d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n      )\n      (normalization_2): Sequential(\n        (0): InstanceNorm3d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n      )\n      (convolution_1): Conv3d(64, 8, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n      (convolution_2): Conv3d(8, 8, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n      (residual_mapping): Conv3d(64, 8, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)\n      (downsampling): Sequential()\n    )\n  )\n  (decoding): ModuleList(\n    (0): CoordinatesFullyConnectedBlock(\n      (activation_1): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (activation_2): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (normalization_1): Sequential(\n        (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (normalization_2): Sequential(\n        (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (linear_1): Linear(in_features=483, out_features=128, bias=True)\n      (linear_2): Linear(in_features=128, out_features=128, bias=True)\n      (residual_mapping): Linear(in_features=483, out_features=128, bias=True)\n    )\n    (1): CoordinatesFullyConnectedBlock(\n      (activation_1): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (activation_2): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (normalization_1): Sequential(\n        (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (normalization_2): Sequential(\n        (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (linear_1): Linear(in_features=128, out_features=128, bias=True)\n      (linear_2): Linear(in_features=128, out_features=128, bias=True)\n      (residual_mapping): Identity()\n    )\n    (2): CoordinatesFullyConnectedBlock(\n      (activation_1): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (activation_2): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (normalization_1): Sequential(\n        (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (normalization_2): Sequential(\n        (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (linear_1): Linear(in_features=128, out_features=128, bias=True)\n      (linear_2): Linear(in_features=128, out_features=128, bias=True)\n      (residual_mapping): Identity()\n    )\n    (3): CoordinatesFullyConnectedBlock(\n      (activation_1): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (activation_2): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (normalization_1): Sequential(\n        (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (normalization_2): Sequential(\n        (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (linear_1): Linear(in_features=128, out_features=128, bias=True)\n      (linear_2): Linear(in_features=128, out_features=128, bias=True)\n      (residual_mapping): Identity()\n    )\n    (4): CoordinatesFullyConnectedBlock(\n      (activation_1): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (activation_2): Sequential(\n        (0): LeakyReLU(negative_slope=0.01)\n      )\n      (normalization_1): Sequential(\n        (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (normalization_2): Sequential(\n        (0): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (linear_1): Linear(in_features=128, out_features=128, bias=True)\n      (linear_2): Linear(in_features=128, out_features=128, bias=True)\n      (residual_mapping): Identity()\n    )\n  )\n  (output_block): Sequential(\n    (0): Linear(in_features=128, out_features=1, bias=True)\n    (1): Sequential(\n      (0): Sigmoid()\n    )\n  )\n)", "optim": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n    eps: 1e-08\n    lr: 0.001\n    weight_decay: 0\n)", "loss": "BCELoss()"}